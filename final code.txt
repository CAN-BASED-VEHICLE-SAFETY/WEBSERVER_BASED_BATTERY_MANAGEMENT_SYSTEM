#include <Arduino.h>                
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <ACS712.h>
#include <HTTPClient.h>

const char * ssid = "suresh";
const char * password = "12345678";
String GOOGLE_SCRIPT_ID = "AKfycby8BTbObpPi3fiETytOGqoIXcbGe8KWjJDHPQKCC9aROV9codw38Ux0dHUD2qkW3HMh";
#define DHTPIN 4
#define def 35
#define DHTTYPE    DHT11
DHT dht(DHTPIN, DHTTYPE);
//ACS712 sensor(ACS712_05B, 35); 
//const float ACS712_SENSITIVITY = 0.200; // Sensitivity for 20A module (adjust according to your module)
 #define CURRENT_SCALE  1.5 // R4+R5 / R5 // ( 1K + 2K ) / 2K

 double mVperAmp = 200; //Sensityvit of the sensor //  use 100 for 20A Module and 66 for 30A Module
    double ACSoffset = 2500; // Ideally it should be ( 0.1 x Vcc ) // measured value is 514mV
//ACS712 acs712(ACS712_PIN, ACS712_SENSITIVITY);
float voltage;
float batt_percentage;
float current;
float Temperature;
float Humidity;
AsyncWebServer server(80);
const char index_html[] PROGMEM = R"rawliteral(<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
   <title>BATTERY MANAGEMENT SYSTEM</title>
  <h1>BATTERY MANAGEMENT SYSTEM</h1>
  <h2>STATE:<span id="state">  </span></h2>
  <h3>CYCLE:<span id="cycle"> </span></h3>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 <style>
  h1 {
     text-align: center;
     }
  h2 {
  font-size: 12px;
  color: #333;
  text-align: left;
  float: left;
  width: 30%;
  border: 2px solid black;
  padding:5px;
}

h3 {
  font-size: 12px;
  color: #333;
  text-align: left;
  float: right;
  width: 30%;
  border: 2px solid black;
  padding:5px;
}
    .gauge-container {
      display: flex;
      justify-content: center;
      align-items: baseline;
      height: 100vh;
    }

    .gauge {
      width: 250px;
      margin-right: 20px;
      font-family: "Roboto", sans-serif;
      font-size: 32px;
      color: #004033;
    }

    .gauge__body {
      width: 100%;
      height: 0;
      padding-bottom: 50%;
      background: #b4c0be;
      position: relative;
      border-top-left-radius: 100% 200%;
      border-top-right-radius: 100% 200%;
      overflow: hidden;
    }

    .gauge__fill {
      position: absolute;
      top: 100%;
      left: 0;
      width: inherit;
      height: 100%;
      background: #009578;
      transform-origin: center top;
      transform: rotate(0.25turn);
      transition: transform 0.2s ease-out;
    }

    .gauge__cover {
      width: 75%;
      height: 150%;
      background: #ffffff;
      border-radius: 50%;
      position: absolute;
      top: 25%;
      left: 50%;
      transform: translateX(-50%);

      /* Text */
      display: flex;
      align-items: center;
      justify-content: center;
      padding-bottom: 25%;
      box-sizing: border-box;
    }
    .gauge__name {
      text-align: center;
      font-family: "Roboto", sans-serif;
      font-size: 24px;
      color: #004033;
      margin-top: 20px;
    }

    @media (max-width: 768px) {
      .gauge__name {
        font-size: 18px;
        margin-top: 10px;
      }
    }
    body {
      margin: 0;
      padding: 0;
      height: 100vh;
      background-color: #f8f8f8;
    }

    .circular-progress {
      position: absolute;
      top: 67%;
      left: 50%;
      transform: translate(-50%, -50%);
      height: 250px;
      width: 250px;
      border-radius: 50%;
      background: conic-gradient(#0f0 3.6deg, #ededed 0deg);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .circular-progress::before {
      content: "";
      position: absolute;
      height: 210px;
      width: 210px;
      border-radius: 50%;
      background-color: #fff;
    }
    
    .progress-value {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 40px;
      font-weight: 600;
      color: #7d2ae8;
    }

    .progress-text {
      position: absolute;
      top: 75%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 30px;
      font-weight: 500;
      color: #0074D9;
      text-transform: uppercase;
    }
        .meters-wrapper {
        display: flex;
        justify-content: center;
        position: relative;
        height: 300px;
      }
      .meter-wrapper {
        position: relative;
        width: 100px;
        margin:0 60px;
      }
      meter {
        transform: rotate(270deg);
        position: absolute;
        width:150%;
        height:20px;
        top:-40%;
        left:-15%;
        bottom: 0;
        right: 0;
        border-radius: 10px;
        box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.5);
      }
      .meter-value {
        position: absolute;
        bottom:100%;
        left:-15%;
        right: 0;
        text-align: center;
        margin: auto;
        font-size: 24px;
        font-weight: bold;
        margin-top: 10px;
      }
      meter::-webkit-meter-bar {
        background: #e6e6e9; /background color of bar/
      }
      meter::-webkit-meter-optimum-value {
        background: green;
      }
      meter::-webkit-meter-suboptimum-value {
        background: red;
      }
      meter::-webkit-meter-even-less-good-value {
        background: orange;
      }
      .chart-container {
      position: relative;
      margin: auto;
      height: 650px;
      width: 90%;
    }
    canvas {
      position: absolute;
      top: -38%;
      left: 0;
      bottom: 0;
      right: 0;
      width: 100%;
      height: 100%;
    }
    table {
      position: absolute;
                top : 340%;
                  left: 50%;
                 transform: translate(-50%, -50%);
                  width: 100%;
                  margin: 0 auto;
          }
    th {
      padding: 8px;
      text-align: left;
      background-color: #f2f2f2;
      border-bottom: 1px solid #ddd;
       }
    td {
      padding: 8px;
      border-bottom: 1px solid #ddd;
       }
        .para{
                   position: absolute;
              }   
     .warning {
      background-color: #ffffcc;
      color: #ff0000;
      padding: 10px;
      position: absolute;
      top: 50%;
      left: 50%;
      text-align: center;
      transform: translate(-50%, -50%);
      border: 1px solid #ff0000;
     }   
      @media screen and (max-width: 768px) {
      .circular-progress {
                        position: absolute;
                        top: 55%;
             left: 50%;
            transform: translate(-50%, -50%);
        height: 220px;
        width: 220px;
      }

      .circular-progress::before {
                        position: absolute;
        height: 180px;
        width: 180px;
      }

      .progress-value {
                        position: absolute;
        font-size: 35px;
      }

      .progress-text {
                        position: absolute;
        font-size: 25px;
      }
          meter {
                        transform: rotate(270deg);
                        position: absolute;
                        top:-130%;
                        left:-40%;
                        width:180%;
                        height:30px;
                 }
                 .meter-value {
                        position: absolute;
              bottom:190%;
              left:-35%;
              right: 0;
              font-size: 18px;
              font-weight: bold;
              margin-top: 5px;
                }
                .chart-container {
            position: relative;
            margin: auto;
            height: 250px;
            width: 100%;
                        bottom: 53%;
                }
            canvas {
            position: absolute;
                        top: -38%;
            width: 100%;
            height: 250px !important;
        }
           table {
      position: absolute;
                  top: 178%;
                  left: 50%;
                 transform: translate(-50%, -50%);
                }
    .para{
                   position: absolute;
                        top: 192%;
      }   
        @media screen and (max-width: 395px) {
                table {
              position: absolute;
                  top: 181%;
                  left: 50%;
                 transform: translate(-50%, -50%);
                }
        .para{
                   position: absolute;
                        top: 195%;
          }   
           
    @media screen and (max-width: 390px) {
      .circular-progress {
                        position: absolute;
                        top: 62%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        height: 180px;
                        width: 180px;
      }

      .circular-progress::before {
                        position: absolute;
                        height: 140px;
                        width: 140px;
      }

      .progress-value {
                        position: absolute;
                         font-size: 32px;
      }

      .progress-text {
                        position: absolute;
                       font-size: 22px;
      }
                  meter {
                        transform: rotate(270deg);
                        position: absolute;
                        top:-125%;
                        left:-40%;
                        width:200%;
                        height:30px;
                 }
                 .meter-value {
                        position: absolute;
              bottom:190%;
              left:-55%;
              right: 0;
              font-size: 18px;
              font-weight: bold;
              margin-top: 5px;
                }
               .chart-container {
            position: relative;
            margin: auto;
            height: 250px;
          width: 100%;
                        bottom: 60%;
                }
            canvas {
            position: absolute;
                        top: -37%;
            width: 100%;
            height: 250px !important;
        }
         table {
      position: absolute;
                  top: 195%;
                  left: 50%;
                 transform: translate(-50%, -50%);
                }
        .para{
                   position: absolute;
                        top: 211%;
      }
       
</style>
</head>
<body>
<!-- HTML markup with two gauge elements -->
<br><br><br>
<div class="gauge-container">
      <div class="gauge">
      
      <div class="gauge__body">
      <div class="gauge__fill"></div>
      <div class="gauge__cover"></div>
    </div>
 <div class="gauge__name">Voltage</div>
  </div>
<div class="box">
 </div>
 <div class="gauge gauge2">
    <div class="gauge__body">
      <div class="gauge__fill"></div>
      <div class="gauge__cover"></div>
     </div>
     <div class="gauge__name">Current</div>
  </div>
</div>
<div class="circular-progress">
        <span class="progress-text">SOC</span>
        <span class="progress-value">0%</span>
    </div>
<div class="meters-wrapper">
      <div class="meter-wrapper">
        <p class="meter-value">Temperature:<span id="vtemv">25</span><span>&deg;C</span></p>
        <meter min="15" low="20" high="45" max="75" value="46" id="tem">
        </meter>
      </div>
      <div class="meter-wrapper">
        <p class="meter-value">Humidity:<span id="vhumv">50</span><span>%</span></p>
        <meter min="0" low="30" high="70" max="100" value="50" id="hum">
        </meter>
      </div>
    </div>
     <div class="chart-container">
    <canvas id="chart1"></canvas>
  </div>
  <div class="chart-container">
    <canvas id="chart2"></canvas>
  </div>
    <div id="warning-message" style="display:none;" class="warning">
    Warning: HIGH TEMPERATURE DETECTED!
  </div>
<div id="warning-message1" style="display:none;" class="warning">
    Warning: OVERVOLTAGE DETECTED!
  </div>
<div id="warning-message2" style="display:none;" class="warning">
    Warning: LOW BATTERY PERCENTAGE DETECTED!
  </div>
<table>
    <tr>
      <th>BATTERY HEALTH (SOH)</th>
      <td>98 %</td>
    </tr>
    <tr>
      <th>TIME REMAINING</th>
      <td>4 hours</td>
    </tr>
      <tr>
      <th>POWER CONSUMED</th>
      <td>15 W</td>
    </tr>
    <tr>
      <th>BATTERY RUNNING TIME</th>
      <td>25 hours</td>
    </tr>
    <tr>
      <th>RATED BATTERY CAPACITY</th>
      <td>50000 mAh</td>
    </tr>
  </table>
<div class="para">
<p>The voltage value is: <input type="text" id="Voltage-value"></p>
<p>The Current value is: <input type="text" id="Current-value"></p>
</div>
<style>
  .gauge__fill {
    position: absolute;
    top: 100%;
    left: 0;
    width: inherit;
    height: 100%;
    background: #009578;
    transform-origin: center top;
    transition: transform 0.2s ease-out;
  }

  /* Add additional styles for different color ranges */
  .gauge__fill.low {
    background:#ffcc00;  /* Red color for low values */
  }

  .gauge__fill.medium {
    background:#FFA500; /* Yellow color for medium values */
  }

  .gauge__fill.high {
    background: #FF0000; /* Green color for high values */
  }
</style> 
<script>   
const gaugeElement = document.querySelector(".gauge");
const gaugeElement2 = document.querySelector(".gauge2");

  function setGaugeValue(gauge, value) {
    if (value < 0 || value > 1) {
      return;
    }

    const gaugeFill = gauge.querySelector(".gauge__fill");

    // Update color based on value
    if (value < 0.3) {
      gaugeFill.className = "gauge__fill medium";
    } else if (value < 0.7) {
      gaugeFill.className = "gauge__fill low";
    } else {
      gaugeFill.className = "gauge__fill high";
    }
    
    gaugeFill.style.transform = `rotate(${value / 2}turn)`;
    gauge.querySelector(".gauge__cover").textContent = `${Math.round(
      value * 100
    )}V`;
    
  }
function setGaugeValue1(gauge, value) {
    if (value < 0 || value > 1) {
      return;
    }

    const gaugeFill = gauge.querySelector(".gauge__fill");

    // Update color based on value
    if (value < 0.3) {
      gaugeFill.className = "gauge__fill low";
    } else if (value < 0.7) {
      gaugeFill.className = "gauge__fill medium";
    } else {
      gaugeFill.className = "gauge__fill high";
    }
    gaugeFill.style.transform = `rotate(${value/2}turn)`;
    gauge.querySelector(".gauge__cover").textContent = `${Math.round(
      value * 10
    )}A`;
    
  }
let circularProgress = document.querySelector(".circular-progress"),
        progressValue = document.querySelector(".progress-value");
   

let progressStartValue = 0;
    progressEndValue = 75;
    speed = -500;

let updateProgress = () => {
    progressStartValue =progressEndValue-1;
    let progress = setInterval(() => {
        progressStartValue++;
        progressValue.textContent = `${progressStartValue}%`;
        circularProgress.style.background = `conic-gradient(#0f0 ${progressStartValue * 3.6}deg, #ededed 0deg)`;
        if(progressStartValue == progressEndValue){
            clearInterval(progress);
        }    
       
    }, speed);
};
  var socChartData = {
      labels: [],
      datasets: [{
        label: 'SOC(%) vs Time(sec)',
        borderColor: 'rgb(255, 99, 132)',
        data: [],
        fill: false
      }]
    };

   var socChartOptions = {
      responsive: true,
      title: { 
        display: true,
        },
      scales: {
        xAxes: [{
          type: 'time',
          time: {
            unit: 'second'
          },
          scaleLabel: {
            display: true,
            labelString: 'Time(Sec)'
          }
        }],
        yAxes: [{
          type: 'linear',
          scaleLabel: {
            display: true,
            labelString: 'SOC(%)'
          },
          ticks: {
            min: 0,
            max: 100
          }
        }]
      }
    };

    var socCtx = document.getElementById('chart1').getContext('2d');
    var socChart = new Chart(socCtx, {
      type: 'line',
      data: socChartData,
      options: socChartOptions
    });

    var voltageChartData = {
      labels: [],
      datasets: [{
        label: 'Voltage(V) vs Time(sec)',
        borderColor: 'rgb(255, 140, 15)',
        data: [],
        fill: false
      }]
    };

     var voltageChartOptions = {
      responsive: true,
      title: {
        display: true,
       },
      scales: {
        xAxes: [{
          type: 'time',
          time: {
            unit: 'second'
          },
          scaleLabel: {
                  display: true,
                  labelString: 'Time(Sec)'
      }
    }],
    yAxes: [{
      type: 'linear',
      scaleLabel: {
        display: true,
        labelString: 'Voltage(V)'
      },
      ticks: {
        min: 0,
        max: 5
      }
    }]
  }
};

var voltageCtx = document.getElementById('chart2').getContext('2d');
var voltageChart = new Chart(voltageCtx, {
  type: 'line',
  data: voltageChartData,
  options: voltageChartOptions
});
  var arduinoValue = 0;
  var arduinoValue2 = 0;
  var Temp = 27;
  var SOC=75;
  function loadData() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var data = JSON.parse(this.responseText);
        if(arduinoValue+0.002 < (parseFloat(data.value1)/10)){
        document.getElementById("state").innerHTML ="Chg";
        }
        else{
        document.getElementById("state").innerHTML ="Dischg";
        }
        arduinoValue = parseFloat(data.value1)/100;
        arduinoValue2= parseFloat(data.value2)/10;
        Temp=parseInt(data.value3);
        SOC=parseInt(data.value5);  
        document.getElementById("Voltage-value").value = parseFloat(data.value1).toFixed(2);
        document.getElementById("Current-value").value = parseFloat(data.value2).toFixed(2);
        document.getElementById("tem").value = parseInt(data.value3);
        document.getElementById("vtemv").innerHTML = parseInt(data.value3);
        document.getElementById("hum").value = parseInt(data.value4);
        document.getElementById("vhumv").innerHTML = parseInt(data.value4);
        document.getElementById("cycle").innerHTML =1;
        setGaugeValue(gaugeElement, arduinoValue);
        setGaugeValue1(gaugeElement2, arduinoValue2);
        if(progressEndValue != SOC || SOC==75){
             progressEndValue = SOC;
             updateProgress();
       }
     if (Temp > 60) {
     document.getElementById("warning-message").style.display = "block";
    } else {
      
      document.getElementById("warning-message").style.display = "none";
    }
    if (arduinoValue > 0.523) {
     document.getElementById("warning-message1").style.display = "block";
    } else {
      
      document.getElementById("warning-message1").style.display = "none";
    }
  if (SOC < 15) {
     document.getElementById("warning-message2").style.display = "block";
    } else {
      
      document.getElementById("warning-message2").style.display = "none";
    }
       }
    };
    xhttp.open("GET", "/values", true);
    xhttp.send();
  }
  setInterval(loadData, 3000);
setInterval(function() {
       var soc = SOC;
       var voltage = arduinoValue;
       var time = new Date().getTime();
          time = time%100;
      socChartData.labels.push(time);
      socChartData.datasets[0].data.push(soc);
      if (socChartData.labels.length > 10) {
        socChartData.labels.shift();
        socChartData.datasets[0].data.shift();
      }
      voltageChartData.labels.push(time);
      voltageChartData.datasets[0].data.push(voltage);
      if (voltageChartData.labels.length > 10) {
      voltageChartData.labels.shift();
      voltageChartData.datasets[0].data.shift();
  }
      voltageChart.update();
      socChart.update();
}, 5000);
</script>
</body>
</html>)rawliteral";
float mapfloat(float x, float in_min, float in_max, float out_min, float out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
void setup() {
   
    Serial.begin(115200);
    dht.begin();
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
    }
    Serial.println(WiFi.localIP());
    
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
    });
    server.on("/values", HTTP_GET, [](AsyncWebServerRequest *request){
    StaticJsonDocument<200> doc;
    #define abc 34
    #define def 35
    float calibration=0.0765;
    float sensorValue=analogRead(abc);
    float voltage = (((sensorValue) / 4095)*54*((6.509/5.6) + calibration));
    float bat_percentage = mapfloat(voltage, 23.8, 52.3, 0, 100); //2.8V as Battery Cut off Voltage & 4.2V as Maximum Voltage
   if (bat_percentage >= 100)
  {
    bat_percentage = 100;
  }
  if (bat_percentage <= 0)
  {
    bat_percentage = 1;
  }
    double tmp = 0;
  double avg = 0;
  double ADCVoltage = 0;
  double Amps = 0;
  for (int z = 0; z < 150; z++)
  {
    tmp = tmp + analogRead(def);
  }
  avg = tmp / 150;
  ADCVoltage = ((avg*3331) / 4095); // Gets you mV
  Amps = ((ADCVoltage * CURRENT_SCALE - ACSoffset ) / mVperAmp); // 1.5 is the scaling for voltage divider
  current = Amps/2  ;
    float  Temperature=dht.readTemperature();
    float Humidity = dht.readHumidity();
    //int Soc=89;
    doc["value1"] = voltage;
    doc["value2"] = current;
    doc["value3"] = Temperature;
    doc["value4"] = Humidity;
    doc["value5"] = bat_percentage;
    String json;
    serializeJson(doc, json);
    request->send(200, "application/json", json);
    });
  server.begin();

    Serial.println("Server started");
}
WiFiClientSecure client;
const int sendInterval = 50;
void write_google_sheet(String params) {
    HTTPClient http;
    String url="https://script.google.com/macros/s/"+GOOGLE_SCRIPT_ID+"/exec?"+params;
    Serial.println(url);
    http.begin(url.c_str());
    http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
    int httpCode = http.GET();  
    Serial.print("HTTP Status Code: ");
    Serial.println(httpCode);
    
    String payload;
    if (httpCode > 0) {
        payload = http.getString();
        Serial.println("Payload: "+payload);     
    }
    http.end();
}
void loop() {
    // Nothing to do here
    #define abc 34
    float calibration=0.0765;
    float sensorValue=analogRead(abc);
    float voltage = (((sensorValue) / 4095) *54*((6.509/5.6) + calibration));
  // Read current
// Read current
  double tmp = 0;
  double avg = 0;
  double ADCVoltage = 0;
  double Amps = 0;
  for (int z = 0; z < 150; z++)
  {
    tmp = tmp + analogRead(def);
  }
  avg = tmp / 150;
  ADCVoltage = ((avg*3331) / 4095); // Gets you mV
  Amps = (((ADCVoltage * CURRENT_SCALE) - ACSoffset ) / mVperAmp); // 1.5 is the scaling for voltage divider
  current = Amps/2;
  

  // Convert the raw ADC value to current using the ACS712 library
  // Display current value
  Serial.println(avg);
  Serial.print("Current (A): ");
  Serial.println(current);

    float  Temperature=dht.readTemperature();
    write_google_sheet( "value1="+String(Temperature)+"&value2="+String(voltage)+"&value3="+String(current));
    delay(5000);
}